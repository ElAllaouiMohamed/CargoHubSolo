name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - Development
  pull_request:
    branches:
      - main
      - Development

env:
  DOTNET_VERSION: '8.0.x'
  PYTHON_VERSION: '3.12'
  SOLUTION_PATH: 'CargoHubSolo.sln'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache .NET dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 autopep8 pytest httpx

      - name: Run C# linting
        run: |
          dotnet tool install -g dotnet-format
          dotnet format whitespace ${{ env.SOLUTION_PATH }} --verify-no-changes
          dotnet format ${{ env.SOLUTION_PATH }} --verify-no-changes
          dotnet format whitespace CargoHubSolo.sln --verify-no-changes   
          dotnet format style CargoHubSolo.sln --verify-no-changes
          dotnet format CargoHubSolo.sln




      - name: Format Python code
        run: autopep8 --in-place --aggressive --aggressive IntegrationTests/*.py

      - name: Run Python linting
        run: flake8 IntegrationTests --max-line-length=120 --extend-ignore=E203,W503 --extend-exclude=venv

      - name: Build .NET project
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

  test:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore UnitTest dependencies
        run: dotnet restore UnitTests/UnitTests.csproj

      - name: Build UnitTest project
        run: dotnet build UnitTests/UnitTests.csproj --configuration Release --no-restore

      - name: Run unit tests with coverage
        run: |
          dotnet test UnitTests/UnitTests.csproj --configuration Release \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=cobertura \
            /p:CoverletOutput=UnitTests/coverage/cobertura.xml

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate coverage report
        run: |
          reportgenerator -reports:UnitTests/coverage/coverage.cobertura.xml -targetdir:UnitTests/coverage-report -reporttypes:"Html;TextSummary" -sourcepath:CargoHubV2

      - name: Display coverage in summary
        id: coverage
        run: |
          COVERAGE=$(grep "Line coverage" UnitTests/coverage-report/Summary.txt | awk '{print $3}' | sed 's/%//')
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "## Code Coverage" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Line Coverage | ${COVERAGE}% |" >> $GITHUB_STEP_SUMMARY
          if (( $(echo "$COVERAGE < 10" | bc -l) )); then
            echo "Code coverage is below 10%!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish Linux x64 executable
        run: |
          dotnet publish CargoHubV2/CargoHubV2.csproj --configuration Release --runtime linux-x64 --self-contained true --output publish

      - name: Create archive artifact
        run: tar -czf linux-x64-executable.tar.gz -C publish .

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-executable
          path: linux-x64-executable.tar.gz

  notify:
    runs-on: ubuntu-latest
    needs: [build, test, deploy]
    if: always()

    steps:
      - name: Notify Discord on success
        if: ${{ success() }}
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          message: "CI/CD pipeline succeeded for ${{ github.repository }}! Coverage: ${{ needs.test.outputs.coverage }}%"

      - name: Notify Discord on failure
        if: ${{ failure() }}
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          message: "CI/CD pipeline failed for ${{ github.repository }}! Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
