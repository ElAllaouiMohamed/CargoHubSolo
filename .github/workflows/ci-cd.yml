name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      DOTNET_VERSION: '8.0.x'
      SOLUTION_PATH: 'CargoHubSolo.sln'
      UNIT_TEST_PROJECT: 'UnitTests/UnitTests.csproj'
      API_PROJECT: 'CargoHubV2/CargoHubV2.csproj'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache .NET dependencies
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Restore .NET dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Run C# linting
        run: |
          dotnet tool install -g dotnet-format
          dotnet format ${{ env.SOLUTION_PATH }} --verify-no-changes

      - name: Run Python linting
        run: |
          pip install flake8
          flake8 IntegrationTests --max-line-length=120

      - name: Build
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

      - name: Run unit tests with coverage
        run: |
          dotnet test ${{ env.UNIT_TEST_PROJECT }} \
            --no-restore \
            --configuration Release \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=cobertura \
            /p:CoverletOutput=../coverage/cobertura.xml

      - name: Generate coverage report
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            "-reports:coverage/cobertura.xml" \
            "-targetdir:coverage/report" \
            "-reporttypes:Html;TextSummary"
          cat coverage/report/Summary.txt

      - name: Display coverage in summary
        id: coverage
        run: |
          COVERAGE=$(grep "Line coverage" coverage/report/Summary.txt | awk '{print $3}' | sed 's/%//')
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "## Code Coverage" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Line Coverage | ${COVERAGE}% |" >> $GITHUB_STEP_SUMMARY
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Code coverage is lager 80%!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Start API
        run: |
          dotnet publish ${{ env.API_PROJECT }} --configuration Release --no-restore
          nohup dotnet run --project ${{ env.API_PROJECT }} --configuration Release &
          sleep 10

      - name: Run integration tests
        run: |
          pip install pytest httpx
          pytest IntegrationTests -v

      - name: Build Linux x64 executable
        run: |
          dotnet publish ${{ env.API_PROJECT }} \
            --configuration Release \
            --runtime linux-x64 \
            --self-contained true \
            -o publish
          tar -czf linux-x64-executable.tar.gz -C publish .

      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-executable
          path: linux-x64-executable.tar.gz

      - name: Notify Discord on success
        if: success()
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          message: CI/CD pipeline succeeded for ${{ github.repository }}! Coverage: ${{ steps.coverage.outputs.coverage }}%

      - name: Notify Discord on failure
        if: failure()
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          message: CI/CD pipeline failed for ${{ github.repository }}! Check the logs
